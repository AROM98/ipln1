#!python3
#!/usr/local/bin
"""
Programa para captar relações entre entidades por cada capitulo de um livro.
...
"""
import sys
from getopt import getopt
from re import *
import re
import spacy
import functools

en = spacy.load("en_core_web_sm")
pt = spacy.load("pt_core_news_sm")

spa = en

quebraR = r'CHAPTER '
#quebraR = r'— CAPÍTULO'

ops,args = getopt(sys.argv[1:],"l:q: ")
ops = dict(ops)

if '-l' in ops:
    if(ops['-l']=='pt'):
        spa = pt
        print('Linguagem definida: ',spa.meta['lang'])
        print('A ler: ',args)
    elif(ops['-l']=='en'):
        spa = en
        print('Linguagem definida: ',spa.meta['lang'])
        print('A ler: ',args)
    else:
        print('Linguagem nao aceite. Disponivel apenas: \'-l pt\' ou \'-l en\'\n')
        exit()

else:
    print("Linguagem pré definida(EN)")
    print(spa.meta['lang'])
    print('A ler: ',args)


if '-q' in ops:
    quebraR = ops['-q']


'''
Função que da split do texto pela string quebraR
'''
def quebra(texto):
    return re.split(quebraR ,texto)

'''
Função que da concat ao elementos de uma lista, de modo a formar uma chave que
irá ser usado num dicionario de um certo capitulo.
'''
def concat_key(ls):
    return functools.reduce(lambda a,b: a + " " + b, ls)

'''
Função que recebe um dicionario e uma lista de entidades (apanhadas de uma frase).
É usado a concat_key() para formar a chave que usamos para procurar no dicionario,
Se exister devolve o valor e caso contrário devolve 0 (valor default),  a isto é acrescentado mais 1.
finalmente é adicionado ao dicinonario o novo numero de ocorrencias.
'''
def add_encounter(cap_encounters, ls):
    key_enc = concat_key(ls) # key (string) que representa as entidades
    num_enc = cap_encounters.get(key_enc, 0) + 1 # procura no dic do capito se encontra a key, se nao da 0
    cap_encounters[key_enc] = num_enc # add no dic do cap.

'''
Função que recebe o dicionario global, o numero de um capitulo e uma lista de listas de entidades.
Esta lista de listas representa todas as frases de um capitulo.
É criado um dicionario vazio (capitulo) para inserir as chaves e as ocorrencias.
(for) para cada frase num capitulo faz o add_enconter().
finalmente insere o dicionario criado, usando como chave o nº do capitulo a que se refere.
'''
def get_capitulo(god_dict, num_cap, lista_de_ents):
    init_dict = {}
    for ents in lista_de_ents:
        add_encounter(init_dict, ents)
    god_dict[num_cap] = init_dict

'''
Função usada para percorer o dicionario principal e imprimir de forma legivel
o resultado.
'''
def pretty_print_caps(god_dict):
    for cap_num, cap_dict in god_dict.items():
        if not (cap_num == 0):
            print('FOR CHAPTER #' + str(cap_num))
            tmp = sorted(god_dict[cap_num].items(), key=lambda x: x[1]) # ordena por nº de interaçoes
            for ents, ents_encounters in tmp:
                print('\t(' + ents + ') -> ' + str(ents_encounters))


def flatten(input_list):
    '''
    A function to flatten complex list.
    :param input_list: The list to be flatten
    :return: the flattened list.
    '''
    flat_list = []
    for i in input_list:
        if type(i) == list:
            flat_list += flatten(i)
        else:
            flat_list += [i]
    return flat_list


# vai chamar-se interact e sera a função que usa o spacy para encontrar ralaçoes entre as personagens.
'''
função que faz o tratamento das entidades captadas pelo spacy
'''
def interact(frase):
    # seleciona apenas entidades com label de PERSON or PER
    name_entity = [x for x in frase.ents if x.label_ in ['PER','PERSON']]
    # converte os nomes para minusculas e remove 's
    name_entity = [str(x).replace("'s","") for x in name_entity]
    # seleciona apenas nomes que começam com letra minuscula
    name_entity = [str(x) for x in name_entity if x[0].isupper()]
    # em nomes com espaço, este é substituido por _
    name_entity = [x.replace(' ','_') for x in name_entity]
    # flatten the name list
    name_entity = flatten(name_entity)
    # remove nomes com tamanho menor 3, para aumentar fiabilidade
    name_entity = [x for x in name_entity if len(x) >= 3]
    # retira nomes repetidos e ordena-os por ordem alfabetica.
    my_elems = sorted(set(name_entity))
    return my_elems

god_dict = {}


'''
função que vai dividir livro por capitulos e usar a funçao interact em cada um.
'''
def procTexto(t):
    # vars
    num_cap = 0
    capitulos = quebra(t)

    for cap in capitulos:
        # spacy
        text = spa(cap)
        text.vocab.vectors
        frases = list(text.sents)
        cap_ent = [] #lista que guarda todas as frases de um capitulo
        for j in range(0,len(frases)):

            name_entity = interact(frases[j])
            if len(name_entity) >= 2: # se a lista tiver mais do que 2 entidades adiciona.
                cap_ent.append(name_entity)

        get_capitulo(god_dict, num_cap, cap_ent)  # dentro do dic_god[capitulo] adicionar dic de dic interaçoes
        num_cap += 1
    pretty_print_caps(god_dict)

'''
usado para ler o livro
'''
for ficheiro in args:
    with open(ficheiro) as f :
        txt = f.read()
    #processar o texto
    procTexto(txt)
